!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
NULL	rbtree.h	22;"	d
RB_BLACK	rbtree.h	25;"	d
RB_CLEAR_NODE	rbtree.h	78;"	d
RB_EMPTY_NODE	rbtree.h	77;"	d
RB_EMPTY_ROOT	rbtree.h	74;"	d
RB_RED	rbtree.h	24;"	d
RB_ROOT	rbtree.h	71;"	d
RB_ROOT_CACHED	rbtree.h	162;"	d
WRITE_ONCE	rbtree.h	27;"	d
_LINUX_RBTREE_H	rbtree.h	13;"	d
____rb_erase_color	rbtree.c	/^static __always_inline void ____rb_erase_color(struct rb_node *parent, struct rb_root *root, void (*augment_rotate)(struct rb_node *old, struct rb_node *new))$/;"	f	file:
__rb_change_child	rbtree.c	/^static inline void __rb_change_child(struct rb_node *old, struct rb_node *new, struct rb_node *parent, struct rb_root *root)$/;"	f	file:
__rb_change_child_rcu	rbtree.c	/^static inline void __rb_change_child_rcu(struct rb_node *old, struct rb_node *new, struct rb_node *parent, struct rb_root *root)$/;"	f	file:
__rb_color	rbtree.h	40;"	d
__rb_erase_augmented	rbtree.c	/^static inline struct rb_node *__rb_erase_augmented(struct rb_node *node, struct rb_root *root, const struct rb_augment_callbacks *augment)$/;"	f	file:
__rb_erase_color	rbtree.c	/^void __rb_erase_color(struct rb_node *parent, struct rb_root *root, void (*augment_rotate)(struct rb_node *old, struct rb_node *new))$/;"	f
__rb_insert	rbtree.c	/^static __always_inline void __rb_insert(struct rb_node *node, struct rb_root *root, void (*augment_rotate)(struct rb_node *old, struct rb_node *new))$/;"	f	file:
__rb_insert_augmented	rbtree.c	/^void __rb_insert_augmented(struct rb_node *node, struct rb_root *root, void (*augment_rotate)(struct rb_node *old, struct rb_node *new))$/;"	f
__rb_is_black	rbtree.h	41;"	d
__rb_is_red	rbtree.h	42;"	d
__rb_parent	rbtree.h	38;"	d
__rb_parent_color	rbtree.h	/^    unsigned long  __rb_parent_color;$/;"	m	struct:rb_node
__rb_rotate_set_parents	rbtree.c	/^static inline void __rb_rotate_set_parents(struct rb_node *old, struct rb_node *new, struct rb_root *root, int color)$/;"	f	file:
_bool	rbtree.h	/^typedef enum _bool {$/;"	g
bool	rbtree.h	/^} bool;$/;"	t	typeref:enum:_bool
container_of	rbtree.h	49;"	d
copy	rbtree.c	/^    void (*copy)(struct rb_node *old, struct rb_node *new);$/;"	m	struct:rb_augment_callbacks	file:
dummy_callbacks	rbtree.c	/^static const struct rb_augment_callbacks dummy_callbacks = {$/;"	v	typeref:struct:rb_augment_callbacks	file:
dummy_copy	rbtree.c	/^static inline void dummy_copy(struct rb_node *old, struct rb_node *new) {}$/;"	f	file:
dummy_propagate	rbtree.c	/^static inline void dummy_propagate(struct rb_node *node, struct rb_node *stop) {}$/;"	f	file:
dummy_rotate	rbtree.c	/^static inline void dummy_rotate(struct rb_node *old, struct rb_node *new) {}$/;"	f	file:
erase_cached	main.c	/^static void erase_cached(struct test_node *node, struct rb_root_cached *root)$/;"	f	file:
false	rbtree.h	/^    false = 0,$/;"	e	enum:_bool
insert_cached	main.c	/^static void insert_cached(struct test_node *node, struct rb_root_cached *root)$/;"	f	file:
key	main.c	/^    int key;$/;"	m	struct:test_node	file:
main	main.c	/^int main(int argc, char *argv[])$/;"	f
nodes	main.c	/^static struct test_node *nodes = NULL;$/;"	v	typeref:struct:test_node	file:
offsetof	rbtree.h	48;"	d
propagate	rbtree.c	/^    void (*propagate)(struct rb_node *node, struct rb_node *stop);$/;"	m	struct:rb_augment_callbacks	file:
rb	main.c	/^    struct rb_node rb;$/;"	m	struct:test_node	typeref:struct:test_node::rb_node	file:
rb_augment_callbacks	rbtree.c	/^struct rb_augment_callbacks {$/;"	s	file:
rb_color	rbtree.h	43;"	d
rb_entry	rbtree.h	72;"	d
rb_entry_safe	rbtree.h	119;"	d
rb_erase	rbtree.c	/^void rb_erase(struct rb_node *node, struct rb_root *root)$/;"	f
rb_erase_cached	rbtree.h	/^static inline void rb_erase_cached(struct rb_node *node, struct rb_root_cached *root)$/;"	f
rb_first	rbtree.c	/^struct rb_node *rb_first(const struct rb_root *root)$/;"	f
rb_first_cached	rbtree.h	165;"	d
rb_first_postorder	rbtree.c	/^struct rb_node *rb_first_postorder(const struct rb_root *root)$/;"	f
rb_insert_color	rbtree.c	/^void rb_insert_color(struct rb_node *node, struct rb_root *root)$/;"	f
rb_insert_color_cached	rbtree.h	/^static inline void rb_insert_color_cached(struct rb_node *node, struct rb_root_cached *root, bool leftmost)$/;"	f
rb_is_black	rbtree.h	45;"	d
rb_is_red	rbtree.h	44;"	d
rb_last	rbtree.c	/^struct rb_node *rb_last(const struct rb_root *root)$/;"	f
rb_left	rbtree.h	/^    struct rb_node *rb_left;$/;"	m	struct:rb_node	typeref:struct:rb_node::rb_node
rb_left_deepest_node	rbtree.c	/^static struct rb_node *rb_left_deepest_node(const struct rb_node *node)$/;"	f	file:
rb_leftmost	rbtree.h	/^    struct rb_node *rb_leftmost;$/;"	m	struct:rb_root_cached	typeref:struct:rb_root_cached::rb_node
rb_link_node	rbtree.h	/^static inline void rb_link_node(struct rb_node *node, struct rb_node *parent, struct rb_node **rb_link)$/;"	f
rb_link_node_rcu	rbtree.h	/^static inline void rb_link_node_rcu(struct rb_node *node, struct rb_node *parent, struct rb_node **rb_link)$/;"	f
rb_next	rbtree.c	/^struct rb_node *rb_next(const struct rb_node *node)$/;"	f
rb_next_postorder	rbtree.c	/^struct rb_node *rb_next_postorder(const struct rb_node *node)$/;"	f
rb_node	rbtree.h	/^    struct rb_node *rb_node;$/;"	m	struct:rb_root	typeref:struct:rb_root::rb_node
rb_node	rbtree.h	/^struct rb_node {$/;"	s
rb_parent	rbtree.h	69;"	d
rb_prev	rbtree.c	/^struct rb_node *rb_prev(const struct rb_node *node)$/;"	f
rb_red_parent	rbtree.c	/^static inline struct rb_node *rb_red_parent(struct rb_node *red)$/;"	f	file:
rb_replace_node	rbtree.c	/^void rb_replace_node(struct rb_node *victim, struct rb_node *new, struct rb_root *root)$/;"	f
rb_replace_node_cached	rbtree.h	/^static inline void rb_replace_node_cached(struct rb_node *victim, struct rb_node *new, struct rb_root_cached *root)$/;"	f
rb_replace_node_rcu	rbtree.c	/^void rb_replace_node_rcu(struct rb_node *victim, struct rb_node *new, struct rb_root *root)$/;"	f
rb_right	rbtree.h	/^    struct rb_node *rb_right;$/;"	m	struct:rb_node	typeref:struct:rb_node::rb_node
rb_root	rbtree.h	/^    struct rb_root rb_root;$/;"	m	struct:rb_root_cached	typeref:struct:rb_root_cached::rb_root
rb_root	rbtree.h	/^struct rb_root {$/;"	s
rb_root_cached	rbtree.h	/^struct rb_root_cached {$/;"	s
rb_set_black	rbtree.c	/^static inline void rb_set_black(struct rb_node *rb)$/;"	f	file:
rb_set_parent	rbtree.c	/^static inline void rb_set_parent(struct rb_node *rb, struct rb_node *p)$/;"	f	file:
rb_set_parent_color	rbtree.c	/^static inline void rb_set_parent_color(struct rb_node *rb, struct rb_node *p, int color)$/;"	f	file:
rbtree_postorder_for_each_entry_safe	rbtree.h	141;"	d
rbtree_root	main.c	/^static struct rb_root_cached rbtree_root = RB_ROOT_CACHED;$/;"	v	typeref:struct:rb_root_cached	file:
rcu_assign_pointer	rbtree.h	31;"	d
rotate	rbtree.c	/^    void (*rotate)(struct rb_node *old, struct rb_node *new);$/;"	m	struct:rb_augment_callbacks	file:
search_cached	main.c	/^struct test_node *search_cached(struct rb_root_cached *root, int key) {$/;"	f
test_init	main.c	/^static void test_init(struct rb_root_cached *root, int num) {$/;"	f	file:
test_interator	main.c	/^static void test_interator(struct rb_root_cached *root) {$/;"	f	file:
test_interator_self_define	main.c	/^static void test_interator_self_define(struct rb_root_cached *root) {$/;"	f	file:
test_node	main.c	/^struct test_node {$/;"	s	file:
test_search_erase	main.c	/^static void test_search_erase(struct rb_root_cached *root, int num)$/;"	f	file:
true	rbtree.h	/^    true = 1,$/;"	e	enum:_bool
unlikely	rbtree.h	29;"	d
val	main.c	/^    int val;$/;"	m	struct:test_node	file:
